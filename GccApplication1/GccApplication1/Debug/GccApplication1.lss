
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000133a  000013ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016b  0080010a  0080010a  000013d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001383  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab2  00000000  00000000  000028cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b14  00000000  00000000  00003381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00003e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ae  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000660  00000000  00000000  00004a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000050c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c0       	rjmp	.+346    	; 0x19c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8a c0       	rjmp	.+276    	; 0x15e <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e3       	ldi	r30, 0x3A	; 58
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 37       	cpi	r26, 0x75	; 117
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e9 d4       	rcall	.+2514   	; 0xa96 <main>
      c4:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile unsigned char g_TimerCnt;
volatile unsigned char g_ControlMode = POSITION_CONTROL | VELOCITY_CONTROL | POSITION_CONTROL;


void SetDutyCW(double v){//-24~24V입력 음수는 ccw 양수는 cw 바이폴라 방식을 사용
	while(TCNT1==0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;//음수 ccw 양수 cw
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 38 09 	call	0x1270	; 0x1270 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	0d d7       	rcall	.+3610   	; 0xf02 <__addsf3>
      e8:	dc d7       	rcall	.+4024   	; 0x10a2 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
void SetDutyCW(double v){//-24~24V입력 음수는 ccw 양수는 cw 바이폴라 방식을 사용
	while(TCNT1==0);

	int ocr = v * (200. / 24.) + 200;//음수 ccw 양수 cw
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	
	OCR1A = OCR3B = ocr + 8;		//1 H dead time 미작성시 모터 드라이버 쇼트
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L H->L L->H 가 되는데 시간이 필요함 이 때 순간 두 신호 모두 0이 되는순간이 발생하는데 이 때 24V와 GND가 쇼트됨
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}

void InitLS7366(){
     124:	cf 93       	push	r28
	
	PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	e0 d6       	rcall	.+3520   	; 0xeec <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	de d6       	rcall	.+3516   	; 0xeec <SPI_MasterSend>
	PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	d9 d6       	rcall	.+3506   	; 0xeec <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13c:	d7 d6       	rcall	.+3502   	; 0xeec <SPI_MasterSend>
	
	PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	d3 d6       	rcall	.+3494   	; 0xeec <SPI_MasterSend>
	PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:



int getADC(){//acs712 전류센서 0A 2.5V를 기준으로 1A당 0.1V 변화
	ADMUX = (ADMUX & 0xf0);
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	80 7f       	andi	r24, 0xF0	; 240
     150:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     152:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     154:	34 9b       	sbis	0x06, 4	; 6
     156:	fe cf       	rjmp	.-4      	; 0x154 <getADC+0x8>
	return ADC;
     158:	84 b1       	in	r24, 0x04	; 4
     15a:	95 b1       	in	r25, 0x05	; 5
}
     15c:	08 95       	ret

0000015e <__vector_18>:

ISR(USART0_RX_vect){
     15e:	1f 92       	push	r1
     160:	0f 92       	push	r0
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	0f 92       	push	r0
     166:	11 24       	eor	r1, r1
     168:	0b b6       	in	r0, 0x3b	; 59
     16a:	0f 92       	push	r0
     16c:	8f 93       	push	r24
     16e:	ef 93       	push	r30
     170:	ff 93       	push	r31
	
	//while ( !(UCSR0A & (1<<RXC0)) );
	g_buf[g_BufWriteCnt++] = UDR0;
     172:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <g_BufWriteCnt>
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	8e 0f       	add	r24, r30
     17a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <g_BufWriteCnt>
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	8c b1       	in	r24, 0x0c	; 12
     182:	e8 5d       	subi	r30, 0xD8	; 216
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	80 83       	st	Z, r24
}
     188:	ff 91       	pop	r31
     18a:	ef 91       	pop	r30
     18c:	8f 91       	pop	r24
     18e:	0f 90       	pop	r0
     190:	0b be       	out	0x3b, r0	; 59
     192:	0f 90       	pop	r0
     194:	0f be       	out	0x3f, r0	; 63
     196:	0f 90       	pop	r0
     198:	1f 90       	pop	r1
     19a:	18 95       	reti

0000019c <__vector_16>:

ISR(TIMER0_OVF_vect){
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	0b b6       	in	r0, 0x3b	; 59
     1a8:	0f 92       	push	r0
     1aa:	8f 92       	push	r8
     1ac:	9f 92       	push	r9
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	2f 93       	push	r18
     1bc:	3f 93       	push	r19
     1be:	4f 93       	push	r20
     1c0:	5f 93       	push	r21
     1c2:	6f 93       	push	r22
     1c4:	7f 93       	push	r23
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	cf 93       	push	r28
     1d0:	ef 93       	push	r30
     1d2:	ff 93       	push	r31
	
	TCNT0 = 256 - 125;//0.5ms 125^64/16000000
     1d4:	83 e8       	ldi	r24, 0x83	; 131
     1d6:	82 bf       	out	0x32, r24	; 50
	
	//Read LS7366
	
	int32_t cnt;

	PORTC = 0x01;
     1d8:	c1 e0       	ldi	r28, 0x01	; 1
     1da:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC();//전류 ADC 데이터 입력 받음
     1dc:	b7 df       	rcall	.-146    	; 0x14c <getADC>
     1de:	bc 01       	movw	r22, r24
     1e0:	99 0f       	add	r25, r25
     1e2:	88 0b       	sbc	r24, r24
     1e4:	99 0b       	sbc	r25, r25
     1e6:	90 d7       	rcall	.+3872   	; 0x1108 <__floatsisf>
     1e8:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <g_ADC>
     1ec:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <g_ADC+0x1>
     1f0:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <g_ADC+0x2>
     1f4:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <g_ADC+0x3>
	
	g_preCnt = g_Cnt;
     1f8:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <g_Cnt>
     1fc:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <g_Cnt+0x1>
     200:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <g_Cnt+0x2>
     204:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <g_Cnt+0x3>
     208:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <g_preCnt>
     20c:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <g_preCnt+0x1>
     210:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <g_preCnt+0x2>
     214:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <g_preCnt+0x3>
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | LOAD_REG);//0b00101000 0b11000000
     218:	18 ba       	out	0x18, r1	; 24
     21a:	88 ee       	ldi	r24, 0xE8	; 232
     21c:	67 d6       	rcall	.+3278   	; 0xeec <SPI_MasterSend>
	PORTB = 0x01;
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     21e:	c8 bb       	out	0x18, r28	; 24
     220:	18 ba       	out	0x18, r1	; 24
     222:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();      cnt = cnt<< 8;
     224:	63 d6       	rcall	.+3270   	; 0xeec <SPI_MasterSend>
     226:	67 d6       	rcall	.+3278   	; 0xef6 <SPI_MasterRecv>
     228:	c8 2e       	mov	r12, r24
     22a:	d1 2c       	mov	r13, r1
     22c:	e1 2c       	mov	r14, r1
     22e:	f1 2c       	mov	r15, r1
     230:	fe 2c       	mov	r15, r14
     232:	ed 2c       	mov	r14, r13
     234:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     236:	cc 24       	eor	r12, r12
     238:	5e d6       	rcall	.+3260   	; 0xef6 <SPI_MasterRecv>
     23a:	c8 2a       	or	r12, r24
     23c:	fe 2c       	mov	r15, r14
     23e:	ed 2c       	mov	r14, r13
     240:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     242:	cc 24       	eor	r12, r12
     244:	58 d6       	rcall	.+3248   	; 0xef6 <SPI_MasterRecv>
     246:	c8 2a       	or	r12, r24
     248:	fe 2c       	mov	r15, r14
     24a:	ed 2c       	mov	r14, r13
     24c:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     24e:	cc 24       	eor	r12, r12
     250:	52 d6       	rcall	.+3236   	; 0xef6 <SPI_MasterRecv>
	PORTB = 0x01;//
     252:	c8 bb       	out	0x18, r28	; 24
	
	//if(cnt >= 331776) cnt = (int32_t)cnt- 331776;
	//else if(cnt <= -331776) cnt = (int32_t)cnt + 331776;
	g_Cnt = -cnt;//누적 pulse 값 반환
     254:	c8 2a       	or	r12, r24
     256:	f0 94       	com	r15
     258:	e0 94       	com	r14
     25a:	d0 94       	com	r13
     25c:	c0 94       	com	r12
     25e:	c1 1c       	adc	r12, r1
     260:	d1 1c       	adc	r13, r1
     262:	e1 1c       	adc	r14, r1
     264:	f1 1c       	adc	r15, r1
     266:	c0 92 67 02 	sts	0x0267, r12	; 0x800267 <g_Cnt>
     26a:	d0 92 68 02 	sts	0x0268, r13	; 0x800268 <g_Cnt+0x1>
     26e:	e0 92 69 02 	sts	0x0269, r14	; 0x800269 <g_Cnt+0x2>
     272:	f0 92 6a 02 	sts	0x026A, r15	; 0x80026a <g_Cnt+0x3>
	g_position_cur = (double)(g_Cnt * M_PI / 165888.);//2piM/(PPR) M-Method[rad]
     276:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <g_Cnt>
     27a:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <g_Cnt+0x1>
     27e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <g_Cnt+0x2>
     282:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <g_Cnt+0x3>
     286:	40 d7       	rcall	.+3712   	; 0x1108 <__floatsisf>
     288:	2b ed       	ldi	r18, 0xDB	; 219
     28a:	3f e0       	ldi	r19, 0x0F	; 15
     28c:	49 e4       	ldi	r20, 0x49	; 73
     28e:	50 e4       	ldi	r21, 0x40	; 64
     290:	ef d7       	rcall	.+4062   	; 0x1270 <__mulsf3>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	42 e2       	ldi	r20, 0x22	; 34
     298:	58 e4       	ldi	r21, 0x48	; 72
     29a:	9b d6       	rcall	.+3382   	; 0xfd2 <__divsf3>
     29c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <g_position_cur>
     2a0:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <g_position_cur+0x1>
     2a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_position_cur+0x2>
     2a8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_position_cur+0x3>
	//PPR = 1024 * 4 * 81(분해능 * 채배 * 기어비) rad각도로 변환
	
	PORTC = 0x03;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	85 bb       	out	0x15, r24	; 21
	//if(g_position_des < 0) g_position_des +=2*M_PI;
	//else if(g_position_des >= 2*M_PI) g_position_des -=2*M_PI;//각도는 0~2pi 범위만 쓸 것임
	//if(g_position_cur < 0) g_position_cur +=2*M_PI;
	//else if(g_position_cur >= 2*M_PI) g_position_cur -=2*M_PI;//각도는 0~2pi 범위만 쓸 것임

	if((g_TimerCnt % 100) == 0){//위치 제어 50ms 0.5ms * 100
     2b0:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_TimerCnt>
     2b4:	89 e2       	ldi	r24, 0x29	; 41
     2b6:	98 9f       	mul	r25, r24
     2b8:	81 2d       	mov	r24, r1
     2ba:	11 24       	eor	r1, r1
     2bc:	82 95       	swap	r24
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	24 e6       	ldi	r18, 0x64	; 100
     2c2:	82 9f       	mul	r24, r18
     2c4:	90 19       	sub	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	91 11       	cpse	r25, r1
     2ca:	99 c0       	rjmp	.+306    	; 0x3fe <__vector_16+0x262>
		g_TimerCnt = 0;
     2cc:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <g_TimerCnt>
		
		g_position_perr = g_position_err;//이전 오차 저장
     2d0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_position_err>
     2d4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_position_err+0x1>
     2d8:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <g_position_err+0x2>
     2dc:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <g_position_err+0x3>
     2e0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <g_position_perr>
     2e4:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <g_position_perr+0x1>
     2e8:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <g_position_perr+0x2>
     2ec:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <g_position_perr+0x3>
		g_position_err = g_position_des - g_position_cur;//현재 오차 계산
     2f0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_position_des>
     2f4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <g_position_des+0x1>
     2f8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_position_des+0x2>
     2fc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_position_des+0x3>
     300:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <g_position_cur>
     304:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <g_position_cur+0x1>
     308:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <g_position_cur+0x2>
     30c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <g_position_cur+0x3>
     310:	f7 d5       	rcall	.+3054   	; 0xf00 <__subsf3>
     312:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <g_position_err>
     316:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <g_position_err+0x1>
     31a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <g_position_err+0x2>
     31e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <g_position_err+0x3>
		control_P = Kpp * g_position_err + Kdp * (g_position_err - g_position_perr)/dt3;//미분이 아닌 차분 이용
     322:	c0 90 4a 02 	lds	r12, 0x024A	; 0x80024a <g_position_err>
     326:	d0 90 4b 02 	lds	r13, 0x024B	; 0x80024b <g_position_err+0x1>
     32a:	e0 90 4c 02 	lds	r14, 0x024C	; 0x80024c <g_position_err+0x2>
     32e:	f0 90 4d 02 	lds	r15, 0x024D	; 0x80024d <g_position_err+0x3>
     332:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <g_position_err>
     336:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <g_position_err+0x1>
     33a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_position_err+0x2>
     33e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <g_position_err+0x3>
     342:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <g_position_perr>
     346:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <g_position_perr+0x1>
     34a:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <g_position_perr+0x2>
     34e:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <g_position_perr+0x3>
     352:	d6 d5       	rcall	.+2988   	; 0xf00 <__subsf3>
     354:	2d ec       	ldi	r18, 0xCD	; 205
     356:	3c ec       	ldi	r19, 0xCC	; 204
     358:	4c ec       	ldi	r20, 0xCC	; 204
     35a:	5d e3       	ldi	r21, 0x3D	; 61
     35c:	89 d7       	rcall	.+3858   	; 0x1270 <__mulsf3>
     35e:	2d ec       	ldi	r18, 0xCD	; 205
     360:	3c ec       	ldi	r19, 0xCC	; 204
     362:	4c e4       	ldi	r20, 0x4C	; 76
     364:	5d e3       	ldi	r21, 0x3D	; 61
     366:	35 d6       	rcall	.+3178   	; 0xfd2 <__divsf3>
     368:	4b 01       	movw	r8, r22
     36a:	5c 01       	movw	r10, r24
     36c:	a7 01       	movw	r20, r14
     36e:	96 01       	movw	r18, r12
     370:	c7 01       	movw	r24, r14
     372:	b6 01       	movw	r22, r12
     374:	c6 d5       	rcall	.+2956   	; 0xf02 <__addsf3>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	c5 01       	movw	r24, r10
     37c:	b4 01       	movw	r22, r8
     37e:	c1 d5       	rcall	.+2946   	; 0xf02 <__addsf3>
     380:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <control_P>
     384:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <control_P+0x1>
     388:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <control_P+0x2>
     38c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <control_P+0x3>
		//현재 오차에서 이전 오차를 뺀 뒤 위치 제어 주기로 나누어 차분
		if(control_P > 2.2689) {//제어기 출력(속도 지령)이 최대 각속도 값보다 크면 최대 값으로 변경
     390:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <control_P>
     394:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <control_P+0x1>
     398:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <control_P+0x2>
     39c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <control_P+0x3>
     3a0:	28 ea       	ldi	r18, 0xA8	; 168
     3a2:	35 e3       	ldi	r19, 0x35	; 53
     3a4:	41 e1       	ldi	r20, 0x11	; 17
     3a6:	50 e4       	ldi	r21, 0x40	; 64
     3a8:	5f d7       	rcall	.+3774   	; 0x1268 <__gesf2>
     3aa:	18 16       	cp	r1, r24
     3ac:	6c f4       	brge	.+26     	; 0x3c8 <__vector_16+0x22c>
     3ae:	88 ea       	ldi	r24, 0xA8	; 168
			control_P = 2.2689;
     3b0:	95 e3       	ldi	r25, 0x35	; 53
     3b2:	a1 e1       	ldi	r26, 0x11	; 17
     3b4:	b0 e4       	ldi	r27, 0x40	; 64
     3b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <control_P>
     3ba:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <control_P+0x1>
     3be:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <control_P+0x2>
     3c2:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <control_P+0x3>
     3c6:	1b c0       	rjmp	.+54     	; 0x3fe <__vector_16+0x262>
		}
		else if(control_P < -2.2689) {
     3c8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <control_P>
     3cc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <control_P+0x1>
     3d0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <control_P+0x2>
     3d4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <control_P+0x3>
     3d8:	28 ea       	ldi	r18, 0xA8	; 168
     3da:	35 e3       	ldi	r19, 0x35	; 53
     3dc:	41 e1       	ldi	r20, 0x11	; 17
     3de:	50 ec       	ldi	r21, 0xC0	; 192
     3e0:	f4 d5       	rcall	.+3048   	; 0xfca <__cmpsf2>
     3e2:	88 23       	and	r24, r24
     3e4:	64 f4       	brge	.+24     	; 0x3fe <__vector_16+0x262>
     3e6:	88 ea       	ldi	r24, 0xA8	; 168
			control_P = -2.2689;
     3e8:	95 e3       	ldi	r25, 0x35	; 53
     3ea:	a1 e1       	ldi	r26, 0x11	; 17
     3ec:	b0 ec       	ldi	r27, 0xC0	; 192
     3ee:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <control_P>
     3f2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <control_P+0x1>
     3f6:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <control_P+0x2>
     3fa:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <control_P+0x3>
     3fe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <control_P>
		}
	}
	
	g_velocity_des = control_P;//-10*M_PI/180;//위치 제어기의 속도 지령을 속도 제어기에 입력
     402:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <control_P+0x1>
     406:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <control_P+0x2>
     40a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <control_P+0x3>
     40e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <g_velocity_des>
     412:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <g_velocity_des+0x1>
     416:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <g_velocity_des+0x2>
     41a:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <g_velocity_des+0x3>
     41e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <g_TimerCnt>
	
	if((g_TimerCnt % 10) == 0){//속도 제어 5ms 0.5ms * 10
     422:	8d ec       	ldi	r24, 0xCD	; 205
     424:	28 9f       	mul	r18, r24
     426:	81 2d       	mov	r24, r1
     428:	11 24       	eor	r1, r1
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	86 95       	lsr	r24
     430:	88 0f       	add	r24, r24
     432:	98 2f       	mov	r25, r24
     434:	99 0f       	add	r25, r25
     436:	99 0f       	add	r25, r25
     438:	89 0f       	add	r24, r25
     43a:	28 13       	cpse	r18, r24
     43c:	70 c1       	rjmp	.+736    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
		
		if(g_velocity_des >= g_saturation_P) g_velocity_des = g_saturation_P;
     43e:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <g_velocity_des>
     442:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <g_velocity_des+0x1>
     446:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <g_velocity_des+0x2>
     44a:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <g_velocity_des+0x3>
     44e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     452:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     456:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     45a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     45e:	04 d7       	rcall	.+3592   	; 0x1268 <__gesf2>
     460:	88 23       	and	r24, r24
     462:	8c f0       	brlt	.+34     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     468:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     46c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     470:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     474:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <g_velocity_des>
     478:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <g_velocity_des+0x1>
     47c:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <g_velocity_des+0x2>
     480:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <g_velocity_des+0x3>
     484:	27 c0       	rjmp	.+78     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     486:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		else if(g_velocity_des <= -g_saturation_P) g_velocity_des = -g_saturation_P;
     48a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     48e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     492:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     496:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <g_velocity_des>
     49a:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <g_velocity_des+0x1>
     49e:	40 91 3f 02 	lds	r20, 0x023F	; 0x80023f <g_velocity_des+0x2>
     4a2:	50 91 40 02 	lds	r21, 0x0240	; 0x800240 <g_velocity_des+0x3>
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	90 58       	subi	r25, 0x80	; 128
     4ac:	dd d6       	rcall	.+3514   	; 0x1268 <__gesf2>
     4ae:	88 23       	and	r24, r24
     4b0:	8c f0       	brlt	.+34     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     4be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     4c2:	b0 58       	subi	r27, 0x80	; 128
     4c4:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <g_velocity_des>
     4c8:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <g_velocity_des+0x1>
     4cc:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <g_velocity_des+0x2>
     4d0:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <g_velocity_des+0x3>
		
		//if((g_position_cur < M_PI) & (g_position_pre > M_PI)& (g_velocity_pre>0) )   g_position_pre -= 2*M_PI;
		//CCW,CW회전시 각도 범위 구간 제한 0rad를 지나가는 구간에서 각속도 계산에 문제 발생
		//else if((g_position_cur > M_PI)&(g_position_pre < M_PI) & (g_velocity_pre<0)) g_position_pre += 2*M_PI;
		g_velocity_cur = (double)(g_position_cur - g_position_pre) / 0.005;//각속도 계산
     4d4:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_position_cur>
     4d8:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_position_cur+0x1>
     4dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_position_cur+0x2>
     4e0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_position_cur+0x3>
     4e4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <g_position_pre>
     4e8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <g_position_pre+0x1>
     4ec:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <g_position_pre+0x2>
     4f0:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <g_position_pre+0x3>
     4f4:	05 d5       	rcall	.+2570   	; 0xf00 <__subsf3>
     4f6:	2a e0       	ldi	r18, 0x0A	; 10
     4f8:	37 ed       	ldi	r19, 0xD7	; 215
     4fa:	43 ea       	ldi	r20, 0xA3	; 163
     4fc:	5b e3       	ldi	r21, 0x3B	; 59
     4fe:	69 d5       	rcall	.+2770   	; 0xfd2 <__divsf3>
     500:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <g_velocity_cur>
     504:	70 93 72 02 	sts	0x0272, r23	; 0x800272 <g_velocity_cur+0x1>
     508:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_velocity_cur+0x2>
     50c:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <g_velocity_cur+0x3>
     510:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_position_cur>
		g_position_pre = g_position_cur;//이전 위치 값을 저장함
     514:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_position_cur+0x1>
     518:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <g_position_cur+0x2>
     51c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <g_position_cur+0x3>
     520:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_position_pre>
     524:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_position_pre+0x1>
     528:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <g_position_pre+0x2>
     52c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <g_position_pre+0x3>
     530:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_velocity_cur>
		g_velocity_pre = g_velocity_cur;
     534:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_velocity_cur+0x1>
     538:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <g_velocity_cur+0x2>
     53c:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <g_velocity_cur+0x3>
     540:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_velocity_pre>
     544:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_velocity_pre+0x1>
     548:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <g_velocity_pre+0x2>
     54c:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <g_velocity_pre+0x3>
		
		g_velocity_err = (double)g_velocity_des - g_velocity_cur;//각속도 오차 계산
     550:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <g_velocity_des>
     554:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <g_velocity_des+0x1>
     558:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <g_velocity_des+0x2>
     55c:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <g_velocity_des+0x3>
     560:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <g_velocity_cur>
     564:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <g_velocity_cur+0x1>
     568:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <g_velocity_cur+0x2>
     56c:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <g_velocity_cur+0x3>
     570:	c7 d4       	rcall	.+2446   	; 0xf00 <__subsf3>
     572:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <g_velocity_err>
     576:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <g_velocity_err+0x1>
     57a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <g_velocity_err+0x2>
     57e:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <g_velocity_err+0x3>
		control_S = (double)(Kps * g_velocity_err + Kis * g_velocity_esum *0.005);//제어기 출력(전류 지령)
     582:	80 90 6b 02 	lds	r8, 0x026B	; 0x80026b <g_velocity_err>
     586:	90 90 6c 02 	lds	r9, 0x026C	; 0x80026c <g_velocity_err+0x1>
     58a:	a0 90 6d 02 	lds	r10, 0x026D	; 0x80026d <g_velocity_err+0x2>
     58e:	b0 90 6e 02 	lds	r11, 0x026E	; 0x80026e <g_velocity_err+0x3>
     592:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <g_velocity_esum>
     596:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <g_velocity_esum+0x1>
     59a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <g_velocity_esum+0x2>
     59e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <g_velocity_esum+0x3>
     5a2:	2b ec       	ldi	r18, 0xCB	; 203
     5a4:	31 ea       	ldi	r19, 0xA1	; 161
     5a6:	46 e2       	ldi	r20, 0x26	; 38
     5a8:	52 e4       	ldi	r21, 0x42	; 66
     5aa:	62 d6       	rcall	.+3268   	; 0x1270 <__mulsf3>
     5ac:	2a e0       	ldi	r18, 0x0A	; 10
     5ae:	37 ed       	ldi	r19, 0xD7	; 215
     5b0:	43 ea       	ldi	r20, 0xA3	; 163
     5b2:	5b e3       	ldi	r21, 0x3B	; 59
     5b4:	5d d6       	rcall	.+3258   	; 0x1270 <__mulsf3>
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24
     5ba:	27 ed       	ldi	r18, 0xD7	; 215
     5bc:	33 ea       	ldi	r19, 0xA3	; 163
     5be:	40 ec       	ldi	r20, 0xC0	; 192
     5c0:	5f e3       	ldi	r21, 0x3F	; 63
     5c2:	c5 01       	movw	r24, r10
     5c4:	b4 01       	movw	r22, r8
     5c6:	54 d6       	rcall	.+3240   	; 0x1270 <__mulsf3>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	98 d4       	rcall	.+2352   	; 0xf02 <__addsf3>
     5d2:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <control_S>
     5d6:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <control_S+0x1>
     5da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <control_S+0x2>
     5de:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <control_S+0x3>
		g_velocity_esum += g_velocity_err;//각속도 오차 누적
     5e2:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <g_velocity_err>
     5e6:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <g_velocity_err+0x1>
     5ea:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <g_velocity_err+0x2>
     5ee:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <g_velocity_err+0x3>
     5f2:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <g_velocity_esum>
     5f6:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <g_velocity_esum+0x1>
     5fa:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <g_velocity_esum+0x2>
     5fe:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <g_velocity_esum+0x3>
     602:	7f d4       	rcall	.+2302   	; 0xf02 <__addsf3>
     604:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <g_velocity_esum>
     608:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <g_velocity_esum+0x1>
     60c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <g_velocity_esum+0x2>
     610:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <g_velocity_esum+0x3>
		
		if(control_S >= 2.08) {//제어기 출력이 전류 최대값보다 커질 경우 제어기 출력을 최대값으로 변경 & anti wind-up 실행
     614:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <control_S>
     618:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <control_S+0x1>
     61c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <control_S+0x2>
     620:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <control_S+0x3>
     624:	28 eb       	ldi	r18, 0xB8	; 184
     626:	3e e1       	ldi	r19, 0x1E	; 30
     628:	45 e0       	ldi	r20, 0x05	; 5
     62a:	50 e4       	ldi	r21, 0x40	; 64
     62c:	1d d6       	rcall	.+3130   	; 0x1268 <__gesf2>
     62e:	88 23       	and	r24, r24
			g_velocity_esum -= (double)(control_S - 2.08) * Kas;
     630:	a4 f1       	brlt	.+104    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     632:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <control_S>
     636:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <control_S+0x1>
     63a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <control_S+0x2>
     63e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <control_S+0x3>
     642:	c0 90 38 02 	lds	r12, 0x0238	; 0x800238 <g_velocity_esum>
     646:	d0 90 39 02 	lds	r13, 0x0239	; 0x800239 <g_velocity_esum+0x1>
     64a:	e0 90 3a 02 	lds	r14, 0x023A	; 0x80023a <g_velocity_esum+0x2>
     64e:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <g_velocity_esum+0x3>
     652:	28 eb       	ldi	r18, 0xB8	; 184
     654:	3e e1       	ldi	r19, 0x1E	; 30
     656:	45 e0       	ldi	r20, 0x05	; 5
     658:	50 e4       	ldi	r21, 0x40	; 64
     65a:	52 d4       	rcall	.+2212   	; 0xf00 <__subsf3>
     65c:	22 e3       	ldi	r18, 0x32	; 50
     65e:	36 ee       	ldi	r19, 0xE6	; 230
     660:	46 e7       	ldi	r20, 0x76	; 118
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	05 d6       	rcall	.+3082   	; 0x1270 <__mulsf3>
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	48 d4       	rcall	.+2192   	; 0xf00 <__subsf3>
     670:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <g_velocity_esum>
     674:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <g_velocity_esum+0x1>
     678:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <g_velocity_esum+0x2>
     67c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <g_velocity_esum+0x3>
			control_S = 2.08;
     680:	88 eb       	ldi	r24, 0xB8	; 184
     682:	9e e1       	ldi	r25, 0x1E	; 30
     684:	a5 e0       	ldi	r26, 0x05	; 5
     686:	b0 e4       	ldi	r27, 0x40	; 64
     688:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <control_S>
     68c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <control_S+0x1>
     690:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <control_S+0x2>
     694:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <control_S+0x3>
     698:	42 c0       	rjmp	.+132    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
		}
		else if(control_S <= -2.08) {
     69a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <control_S>
     69e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <control_S+0x1>
     6a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <control_S+0x2>
     6a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <control_S+0x3>
     6aa:	28 eb       	ldi	r18, 0xB8	; 184
     6ac:	3e e1       	ldi	r19, 0x1E	; 30
     6ae:	45 e0       	ldi	r20, 0x05	; 5
     6b0:	50 ec       	ldi	r21, 0xC0	; 192
     6b2:	8b d4       	rcall	.+2326   	; 0xfca <__cmpsf2>
			g_velocity_esum -= (double)(control_S + 2.08) * Kas;
     6b4:	18 16       	cp	r1, r24
     6b6:	9c f1       	brlt	.+102    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     6b8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <control_S>
     6bc:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <control_S+0x1>
     6c0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <control_S+0x2>
     6c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <control_S+0x3>
     6c8:	c0 90 38 02 	lds	r12, 0x0238	; 0x800238 <g_velocity_esum>
     6cc:	d0 90 39 02 	lds	r13, 0x0239	; 0x800239 <g_velocity_esum+0x1>
     6d0:	e0 90 3a 02 	lds	r14, 0x023A	; 0x80023a <g_velocity_esum+0x2>
     6d4:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <g_velocity_esum+0x3>
     6d8:	28 eb       	ldi	r18, 0xB8	; 184
     6da:	3e e1       	ldi	r19, 0x1E	; 30
     6dc:	45 e0       	ldi	r20, 0x05	; 5
     6de:	50 e4       	ldi	r21, 0x40	; 64
     6e0:	10 d4       	rcall	.+2080   	; 0xf02 <__addsf3>
     6e2:	22 e3       	ldi	r18, 0x32	; 50
     6e4:	36 ee       	ldi	r19, 0xE6	; 230
     6e6:	46 e7       	ldi	r20, 0x76	; 118
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	c2 d5       	rcall	.+2948   	; 0x1270 <__mulsf3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	c7 01       	movw	r24, r14
     6f2:	b6 01       	movw	r22, r12
     6f4:	05 d4       	rcall	.+2058   	; 0xf00 <__subsf3>
     6f6:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <g_velocity_esum>
     6fa:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <g_velocity_esum+0x1>
     6fe:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <g_velocity_esum+0x2>
     702:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <g_velocity_esum+0x3>
     706:	88 eb       	ldi	r24, 0xB8	; 184
			control_S = -2.08;
     708:	9e e1       	ldi	r25, 0x1E	; 30
     70a:	a5 e0       	ldi	r26, 0x05	; 5
     70c:	b0 ec       	ldi	r27, 0xC0	; 192
     70e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <control_S>
     712:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <control_S+0x1>
     716:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <control_S+0x2>
     71a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <control_S+0x3>
		}
	}
	
	g_current_des = control_S;//control_S;
     71e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <control_S>
     722:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <control_S+0x1>
     726:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <control_S+0x2>
     72a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <control_S+0x3>
     72e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <g_current_des>
     732:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <g_current_des+0x1>
     736:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <g_current_des+0x2>
     73a:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <g_current_des+0x3>
	if(g_current_des >= g_saturation_S) g_current_des = g_saturation_S;
     73e:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <g_current_des>
     742:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <g_current_des+0x1>
     746:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <g_current_des+0x2>
     74a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <g_current_des+0x3>
     74e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <g_saturation_S>
     752:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <g_saturation_S+0x1>
     756:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <g_saturation_S+0x2>
     75a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <g_saturation_S+0x3>
     75e:	84 d5       	rcall	.+2824   	; 0x1268 <__gesf2>
     760:	88 23       	and	r24, r24
     762:	8c f0       	brlt	.+34     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     764:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_saturation_S>
     768:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_saturation_S+0x1>
     76c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_saturation_S+0x2>
     770:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_saturation_S+0x3>
     774:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <g_current_des>
     778:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <g_current_des+0x1>
     77c:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <g_current_des+0x2>
     780:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <g_current_des+0x3>
     784:	27 c0       	rjmp	.+78     	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
	else if(g_current_des <= -g_saturation_S) g_current_des = -g_saturation_S;  
     786:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_saturation_S>
     78a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_saturation_S+0x1>
     78e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_saturation_S+0x2>
     792:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_saturation_S+0x3>
     796:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <g_current_des>
     79a:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <g_current_des+0x1>
     79e:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <g_current_des+0x2>
     7a2:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <g_current_des+0x3>
     7a6:	bc 01       	movw	r22, r24
     7a8:	cd 01       	movw	r24, r26
     7aa:	90 58       	subi	r25, 0x80	; 128
     7ac:	5d d5       	rcall	.+2746   	; 0x1268 <__gesf2>
     7ae:	88 23       	and	r24, r24
     7b0:	8c f0       	brlt	.+34     	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     7b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_saturation_S>
     7b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_saturation_S+0x1>
     7ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_saturation_S+0x2>
     7be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_saturation_S+0x3>
     7c2:	b0 58       	subi	r27, 0x80	; 128
     7c4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <g_current_des>
     7c8:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <g_current_des+0x1>
     7cc:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <g_current_des+0x2>
	//2.489
	g_current_cur = -( ((g_ADC / 1024. * 5.) - 2.49285) * 10.);//1A당 0.1V 증가 ->1V당 10A 증가 i = (adc*5/1024 - 2.5) * 10
     7d0:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <g_current_des+0x3>
     7d4:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <g_ADC>
     7d8:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <g_ADC+0x1>
     7dc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <g_ADC+0x2>
     7e0:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <g_ADC+0x3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	5a e3       	ldi	r21, 0x3A	; 58
     7ec:	41 d5       	rcall	.+2690   	; 0x1270 <__mulsf3>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 ea       	ldi	r20, 0xA0	; 160
     7f4:	50 e4       	ldi	r21, 0x40	; 64
     7f6:	3c d5       	rcall	.+2680   	; 0x1270 <__mulsf3>
     7f8:	2b ed       	ldi	r18, 0xDB	; 219
     7fa:	3a e8       	ldi	r19, 0x8A	; 138
     7fc:	4f e1       	ldi	r20, 0x1F	; 31
     7fe:	50 e4       	ldi	r21, 0x40	; 64
     800:	7f d3       	rcall	.+1790   	; 0xf00 <__subsf3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e2       	ldi	r20, 0x20	; 32
     808:	51 e4       	ldi	r21, 0x41	; 65
     80a:	32 d5       	rcall	.+2660   	; 0x1270 <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	b0 58       	subi	r27, 0x80	; 128
     812:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <g_current_cur>
     816:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <g_current_cur+0x1>
     81a:	a0 93 32 02 	sts	0x0232, r26	; 0x800232 <g_current_cur+0x2>
     81e:	b0 93 33 02 	sts	0x0233, r27	; 0x800233 <g_current_cur+0x3>
	g_current_err = (double)g_current_des - g_current_cur;//desired current - current
     822:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <g_current_des>
     826:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <g_current_des+0x1>
     82a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <g_current_des+0x2>
     82e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <g_current_des+0x3>
     832:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <g_current_cur>
     836:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <g_current_cur+0x1>
     83a:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <g_current_cur+0x2>
     83e:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <g_current_cur+0x3>
     842:	5e d3       	rcall	.+1724   	; 0xf00 <__subsf3>
     844:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <g_current_err>
     848:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <g_current_err+0x1>
     84c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_current_err+0x2>
	
	control_C = (double)Kpc * g_current_err + Kic * g_current_esum * dt1;//제어기 출력 (전압 지령)
     850:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_current_err+0x3>
     854:	80 90 46 02 	lds	r8, 0x0246	; 0x800246 <g_current_err>
     858:	90 90 47 02 	lds	r9, 0x0247	; 0x800247 <g_current_err+0x1>
     85c:	a0 90 48 02 	lds	r10, 0x0248	; 0x800248 <g_current_err+0x2>
     860:	b0 90 49 02 	lds	r11, 0x0249	; 0x800249 <g_current_err+0x3>
     864:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <g_current_esum>
     868:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <g_current_esum+0x1>
     86c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <g_current_esum+0x2>
     870:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <g_current_esum+0x3>
     874:	23 e3       	ldi	r18, 0x33	; 51
     876:	3b e3       	ldi	r19, 0x3B	; 59
     878:	4a e0       	ldi	r20, 0x0A	; 10
     87a:	55 e4       	ldi	r21, 0x45	; 69
     87c:	f9 d4       	rcall	.+2546   	; 0x1270 <__mulsf3>
     87e:	2f e6       	ldi	r18, 0x6F	; 111
     880:	32 e1       	ldi	r19, 0x12	; 18
     882:	43 e0       	ldi	r20, 0x03	; 3
     884:	5a e3       	ldi	r21, 0x3A	; 58
     886:	f4 d4       	rcall	.+2536   	; 0x1270 <__mulsf3>
     888:	6b 01       	movw	r12, r22
     88a:	7c 01       	movw	r14, r24
     88c:	26 e4       	ldi	r18, 0x46	; 70
     88e:	36 eb       	ldi	r19, 0xB6	; 182
     890:	43 e5       	ldi	r20, 0x53	; 83
     892:	5f e3       	ldi	r21, 0x3F	; 63
     894:	c5 01       	movw	r24, r10
     896:	b4 01       	movw	r22, r8
     898:	eb d4       	rcall	.+2518   	; 0x1270 <__mulsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	2f d3       	rcall	.+1630   	; 0xf02 <__addsf3>
     8a4:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <control_C>
     8a8:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <control_C+0x1>
     8ac:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <control_C+0x2>
     8b0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <control_C+0x3>
	control_C += (double)g_velocity_cur * Kt;//역기전력 전향보상
     8b4:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <g_velocity_cur>
     8b8:	70 91 72 02 	lds	r23, 0x0272	; 0x800272 <g_velocity_cur+0x1>
     8bc:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <g_velocity_cur+0x2>
     8c0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <g_velocity_cur+0x3>
     8c4:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <control_C>
     8c8:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <control_C+0x1>
     8cc:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <control_C+0x2>
     8d0:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <control_C+0x3>
     8d4:	2f ed       	ldi	r18, 0xDF	; 223
     8d6:	30 ee       	ldi	r19, 0xE0	; 224
     8d8:	4b e8       	ldi	r20, 0x8B	; 139
     8da:	5d e3       	ldi	r21, 0x3D	; 61
     8dc:	c9 d4       	rcall	.+2450   	; 0x1270 <__mulsf3>
     8de:	a7 01       	movw	r20, r14
     8e0:	96 01       	movw	r18, r12
     8e2:	0f d3       	rcall	.+1566   	; 0xf02 <__addsf3>
     8e4:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <control_C>
     8e8:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <control_C+0x1>
     8ec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <control_C+0x2>
     8f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <control_C+0x3>
	g_current_esum += (double)g_current_err;//오차 누적
     8f4:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_current_err>
     8f8:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_current_err+0x1>
     8fc:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_current_err+0x2>
     900:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_current_err+0x3>
     904:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <g_current_esum>
     908:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <g_current_esum+0x1>
     90c:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <g_current_esum+0x2>
     910:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <g_current_esum+0x3>
     914:	f6 d2       	rcall	.+1516   	; 0xf02 <__addsf3>
     916:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <g_current_esum>
     91a:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <g_current_esum+0x1>
     91e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_current_esum+0x2>

	//Anti Wind up saturation 24V
	if(control_C >= 24){//제어기 출력이 전압 최대값보다 커질 경우 제어기 출력을 최대값으로 변경 & anti wind-up 실행
     922:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_current_esum+0x3>
     926:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <control_C>
     92a:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <control_C+0x1>
     92e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <control_C+0x2>
     932:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <control_C+0x3>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 ec       	ldi	r20, 0xC0	; 192
     93c:	51 e4       	ldi	r21, 0x41	; 65
     93e:	94 d4       	rcall	.+2344   	; 0x1268 <__gesf2>
		g_current_esum -= (double)(control_C - 24) * Kac;
     940:	88 23       	and	r24, r24
     942:	a4 f1       	brlt	.+104    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     944:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <control_C>
     948:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <control_C+0x1>
     94c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <control_C+0x2>
     950:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <control_C+0x3>
     954:	c0 90 42 02 	lds	r12, 0x0242	; 0x800242 <g_current_esum>
     958:	d0 90 43 02 	lds	r13, 0x0243	; 0x800243 <g_current_esum+0x1>
     95c:	e0 90 44 02 	lds	r14, 0x0244	; 0x800244 <g_current_esum+0x2>
     960:	f0 90 45 02 	lds	r15, 0x0245	; 0x800245 <g_current_esum+0x3>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 ec       	ldi	r20, 0xC0	; 192
     96a:	51 e4       	ldi	r21, 0x41	; 65
     96c:	c9 d2       	rcall	.+1426   	; 0xf00 <__subsf3>
     96e:	22 ef       	ldi	r18, 0xF2	; 242
     970:	3a ef       	ldi	r19, 0xFA	; 250
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	50 e4       	ldi	r21, 0x40	; 64
     976:	7c d4       	rcall	.+2296   	; 0x1270 <__mulsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	bf d2       	rcall	.+1406   	; 0xf00 <__subsf3>
     982:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <g_current_esum>
     986:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <g_current_esum+0x1>
     98a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_current_esum+0x2>
     98e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_current_esum+0x3>
		control_C = 24;
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	a0 ec       	ldi	r26, 0xC0	; 192
     998:	b1 e4       	ldi	r27, 0x41	; 65
     99a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <control_C>
     99e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <control_C+0x1>
     9a2:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <control_C+0x2>
     9a6:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <control_C+0x3>
	}
	else if(control_C <= -24){
     9aa:	42 c0       	rjmp	.+132    	; 0xa30 <__LOCK_REGION_LENGTH__+0x630>
     9ac:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <control_C>
     9b0:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <control_C+0x1>
     9b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <control_C+0x2>
     9b8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <control_C+0x3>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 ec       	ldi	r20, 0xC0	; 192
     9c2:	51 ec       	ldi	r21, 0xC1	; 193
     9c4:	02 d3       	rcall	.+1540   	; 0xfca <__cmpsf2>
     9c6:	18 16       	cp	r1, r24
		g_current_esum -= (double)(control_C + 24) * Kac;
     9c8:	9c f1       	brlt	.+102    	; 0xa30 <__LOCK_REGION_LENGTH__+0x630>
     9ca:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <control_C>
     9ce:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <control_C+0x1>
     9d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <control_C+0x2>
     9d6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <control_C+0x3>
     9da:	c0 90 42 02 	lds	r12, 0x0242	; 0x800242 <g_current_esum>
     9de:	d0 90 43 02 	lds	r13, 0x0243	; 0x800243 <g_current_esum+0x1>
     9e2:	e0 90 44 02 	lds	r14, 0x0244	; 0x800244 <g_current_esum+0x2>
     9e6:	f0 90 45 02 	lds	r15, 0x0245	; 0x800245 <g_current_esum+0x3>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 ec       	ldi	r20, 0xC0	; 192
     9f0:	51 e4       	ldi	r21, 0x41	; 65
     9f2:	87 d2       	rcall	.+1294   	; 0xf02 <__addsf3>
     9f4:	22 ef       	ldi	r18, 0xF2	; 242
     9f6:	3a ef       	ldi	r19, 0xFA	; 250
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	50 e4       	ldi	r21, 0x40	; 64
     9fc:	39 d4       	rcall	.+2162   	; 0x1270 <__mulsf3>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	7c d2       	rcall	.+1272   	; 0xf00 <__subsf3>
     a08:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <g_current_esum>
     a0c:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <g_current_esum+0x1>
     a10:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_current_esum+0x2>
     a14:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_current_esum+0x3>
     a18:	80 e0       	ldi	r24, 0x00	; 0
		control_C = -24;
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 ec       	ldi	r26, 0xC0	; 192
     a1e:	b1 ec       	ldi	r27, 0xC1	; 193
     a20:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <control_C>
     a24:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <control_C+0x1>
     a28:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <control_C+0x2>
     a2c:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <control_C+0x3>
     a30:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <control_C>
	}

	SetDutyCW(control_C);//전압 지령을 모터에 인가
     a34:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <control_C+0x1>
     a38:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <control_C+0x2>
     a3c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <control_C+0x3>
     a40:	44 db       	rcall	.-2424   	; 0xca <SetDutyCW>
     a42:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <g_TimerCnt>
	
	
	/////////////////////////////////////////
	g_TimerCnt++;
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <g_TimerCnt>
     a4c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	g_SendFlag++;
     a50:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     a5a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30

}
     a62:	cf 91       	pop	r28
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <main>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29




int main(void){
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	64 97       	sbiw	r28, 0x14	; 20
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61

	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     aaa:	8e ef       	ldi	r24, 0xFE	; 254
     aac:	8c 83       	std	Y+4, r24	; 0x04
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	8a 83       	std	Y+2, r24	; 0x02
     ab2:	89 83       	std	Y+1, r24	; 0x01

	InitIO();
     ab4:	c2 d1       	rcall	.+900    	; 0xe3a <InitIO>
	
	//Uart
	InitUart0();
     ab6:	08 d2       	rcall	.+1040   	; 0xec8 <InitUart0>
	
	//SPI
	InitSPI();
     ab8:	10 d2       	rcall	.+1056   	; 0xeda <InitSPI>
	
	//Timer
	InitTimer0();
     aba:	cc d1       	rcall	.+920    	; 0xe54 <InitTimer0>
     abc:	d0 d1       	rcall	.+928    	; 0xe5e <InitTimer1>
	InitTimer1();
     abe:	e2 d1       	rcall	.+964    	; 0xe84 <InitTimer3>
     ac0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     ac4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     ac8:	1d bc       	out	0x2d, r1	; 45
     aca:	1c bc       	out	0x2c, r1	; 44
     acc:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	cb 01       	movw	r24, r22
     ad2:	fb da       	rcall	.-2570   	; 0xca <SetDutyCW>
     ad4:	f4 d1       	rcall	.+1000   	; 0xebe <InitADC>
     ad6:	26 db       	rcall	.-2484   	; 0x124 <InitLS7366>
	
	//ADC
	InitADC();
     ad8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_position_des>
	
	//LS7366
	InitLS7366();
     adc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_position_des+0x1>
	g_position_des=0;
     ae0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_position_des+0x2>
     ae4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_position_des+0x3>
     ae8:	83 e8       	ldi	r24, 0x83	; 131
     aea:	82 bf       	out	0x32, r24	; 50
     aec:	78 94       	sei
     aee:	b1 2c       	mov	r11, r1
	TCNT0 = 256 - 125;//0.5ms
     af0:	0f 2e       	mov	r0, r31
     af2:	f4 e1       	ldi	r31, 0x14	; 20
	sei();
     af4:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
     af6:	f0 2d       	mov	r31, r0
		 if (g_SendFlag > 19){//0번 timer OVERFLOW INTERRUP 20회 실행시(10ms) 현재 위치,각속도,전류 송신
			 g_SendFlag = 0;
			 
			 
			 packet.data.id = g_ID;
			 packet.data.size = sizeof(Packet_data_t);
     af8:	0f 2e       	mov	r0, r31
     afa:	f3 e0       	ldi	r31, 0x03	; 3
     afc:	af 2e       	mov	r10, r31
     afe:	f0 2d       	mov	r31, r0
			 packet.data.mode = 3;
     b00:	7e 01       	movw	r14, r28
     b02:	85 e1       	ldi	r24, 0x15	; 21
     b04:	e8 0e       	add	r14, r24
     b06:	f1 1c       	adc	r15, r1
     b08:	0f 2e       	mov	r0, r31
     b0a:	fe e4       	ldi	r31, 0x4E	; 78
     b0c:	cf 2e       	mov	r12, r31
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
				 
				 case 1:
				 g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				 
				 if (checkSize == 8){
					 if (g_PacketBuffer.data.id == g_ID){
     b10:	df 2e       	mov	r13, r31
     b12:	f0 2d       	mov	r31, r0
     b14:	68 94       	set
     b16:	77 24       	eor	r7, r7
     b18:	71 f8       	bld	r7, 1
     b1a:	88 24       	eor	r8, r8
						 g_PacketMode = 2;
     b1c:	83 94       	inc	r8
     b1e:	2d c1       	rjmp	.+602    	; 0xd7a <main+0x2e4>
     b20:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_PacketMode>
			 switch(g_PacketMode){
				 case 0:
				 if (g_buf[g_BufReadCnt] == 0xFF){
					 checkSize++;
					 if (checkSize == 4){
						 g_PacketMode = 1;
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	e1 f0       	breq	.+56     	; 0xb60 <main+0xca>
	
    while (1) {
		
		 for (;g_BufReadCnt !=g_BufWriteCnt;g_BufReadCnt++)
		 {
			 switch(g_PacketMode){
     b28:	18 f0       	brcs	.+6      	; 0xb30 <main+0x9a>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	e1 f1       	breq	.+120    	; 0xba6 <main+0x110>
     b2e:	20 c1       	rjmp	.+576    	; 0xd70 <main+0x2da>
     b30:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <g_BufReadCnt>
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e8 5d       	subi	r30, 0xD8	; 216
				 case 0:
				 if (g_buf[g_BufReadCnt] == 0xFF){
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 81       	ld	r24, Z
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	69 f4       	brne	.+26     	; 0xb5a <main+0xc4>
     b40:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <checkSize>
					 checkSize++;
     b4a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	09 f0       	breq	.+2      	; 0xb54 <main+0xbe>
					 if (checkSize == 4){
     b52:	0e c1       	rjmp	.+540    	; 0xd70 <main+0x2da>
     b54:	80 92 70 02 	sts	0x0270, r8	; 0x800270 <g_PacketMode>
     b58:	0b c1       	rjmp	.+534    	; 0xd70 <main+0x2da>
     b5a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <checkSize>
						 g_PacketMode = 1;
     b5e:	08 c1       	rjmp	.+528    	; 0xd70 <main+0x2da>
     b60:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <checkSize>
					 }
				 }
				 else
				 checkSize = 0;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	8e 0f       	add	r24, r30
				 break;
				 
				 case 1:
				 g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     b68:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <checkSize>
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <g_BufReadCnt>
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	a8 5d       	subi	r26, 0xD8	; 216
     b76:	be 4f       	sbci	r27, 0xFE	; 254
     b78:	8c 91       	ld	r24, X
     b7a:	e2 5b       	subi	r30, 0xB2	; 178
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	80 83       	st	Z, r24
     b80:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
     b84:	88 30       	cpi	r24, 0x08	; 8
     b86:	09 f0       	breq	.+2      	; 0xb8a <main+0xf4>
				 
				 if (checkSize == 8){
     b88:	f3 c0       	rjmp	.+486    	; 0xd70 <main+0x2da>
     b8a:	f6 01       	movw	r30, r12
     b8c:	95 81       	ldd	r25, Z+5	; 0x05
     b8e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_ID>
					 if (g_PacketBuffer.data.id == g_ID){
     b92:	98 13       	cpse	r25, r24
     b94:	03 c0       	rjmp	.+6      	; 0xb9c <main+0x106>
     b96:	70 92 70 02 	sts	0x0270, r7	; 0x800270 <g_PacketMode>
     b9a:	ea c0       	rjmp	.+468    	; 0xd70 <main+0x2da>
     b9c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <g_PacketMode>
						 g_PacketMode = 2;
     ba0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <checkSize>
						 
					 }
					 else{
						 g_PacketMode = 0;
     ba4:	e5 c0       	rjmp	.+458    	; 0xd70 <main+0x2da>
     ba6:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <checkSize>
						 checkSize = 0;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8e 0f       	add	r24, r30
					 }
				 }			 
				 break;
				 case 2:
				 g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     bae:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <checkSize>
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <g_BufReadCnt>
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	a8 5d       	subi	r26, 0xD8	; 216
     bbc:	be 4f       	sbci	r27, 0xFE	; 254
     bbe:	8c 91       	ld	r24, X
     bc0:	e2 5b       	subi	r30, 0xB2	; 178
     bc2:	fd 4f       	sbci	r31, 0xFD	; 253
     bc4:	80 83       	st	Z, r24
     bc6:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <g_BufReadCnt>
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	e8 5d       	subi	r30, 0xD8	; 216
				 check += g_buf[g_BufReadCnt];
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	80 81       	ld	r24, Z
     bd2:	b8 0e       	add	r11, r24
     bd4:	f6 01       	movw	r30, r12
     bd6:	94 81       	ldd	r25, Z+4	; 0x04
     bd8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
				 
				 if (checkSize == g_PacketBuffer.data.size){
     bdc:	98 13       	cpse	r25, r24
     bde:	b9 c0       	rjmp	.+370    	; 0xd52 <main+0x2bc>
     be0:	87 81       	ldd	r24, Z+7	; 0x07
     be2:	b8 12       	cpse	r11, r24
     be4:	b0 c0       	rjmp	.+352    	; 0xd46 <main+0x2b0>
     be6:	86 81       	ldd	r24, Z+6	; 0x06
					 if (check == g_PacketBuffer.data.check){
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0x158>
						 switch(g_PacketBuffer.data.mode){
     bec:	ac c0       	rjmp	.+344    	; 0xd46 <main+0x2b0>
     bee:	60 85       	ldd	r22, Z+8	; 0x08
     bf0:	71 85       	ldd	r23, Z+9	; 0x09
     bf2:	82 85       	ldd	r24, Z+10	; 0x0a
							 case 2:
								g_position_des = g_PacketBuffer.data.pos / 1000.;
     bf4:	93 85       	ldd	r25, Z+11	; 0x0b
     bf6:	88 d2       	rcall	.+1296   	; 0x1108 <__floatsisf>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4a e7       	ldi	r20, 0x7A	; 122
     bfe:	54 e4       	ldi	r21, 0x44	; 68
     c00:	e8 d1       	rcall	.+976    	; 0xfd2 <__divsf3>
     c02:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <g_position_des>
     c06:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <g_position_des+0x1>
     c0a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_position_des+0x2>
     c0e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_position_des+0x3>
     c12:	f6 01       	movw	r30, r12
     c14:	64 85       	ldd	r22, Z+12	; 0x0c
     c16:	75 85       	ldd	r23, Z+13	; 0x0d
								g_saturation_P = g_PacketBuffer.data.velo / 1000.;
     c18:	86 85       	ldd	r24, Z+14	; 0x0e
     c1a:	97 85       	ldd	r25, Z+15	; 0x0f
     c1c:	75 d2       	rcall	.+1258   	; 0x1108 <__floatsisf>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	4a e7       	ldi	r20, 0x7A	; 122
     c24:	54 e4       	ldi	r21, 0x44	; 68
     c26:	d5 d1       	rcall	.+938    	; 0xfd2 <__divsf3>
     c28:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     c2c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c30:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c34:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c38:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c3c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
								if(g_saturation_P < 0) g_saturation_P = -g_saturation_P;
     c40:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c44:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	a9 01       	movw	r20, r18
     c4e:	bd d1       	rcall	.+890    	; 0xfca <__cmpsf2>
     c50:	88 23       	and	r24, r24
     c52:	8c f4       	brge	.+34     	; 0xc76 <main+0x1e0>
     c54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c58:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c5c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c60:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c64:	b0 58       	subi	r27, 0x80	; 128
     c66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c6a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c6e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c72:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c76:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c7a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
								if(g_saturation_P > 2.2689) g_saturation_P = 2.2689;
     c7e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c82:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c86:	28 ea       	ldi	r18, 0xA8	; 168
     c88:	35 e3       	ldi	r19, 0x35	; 53
     c8a:	41 e1       	ldi	r20, 0x11	; 17
     c8c:	50 e4       	ldi	r21, 0x40	; 64
     c8e:	ec d2       	rcall	.+1496   	; 0x1268 <__gesf2>
     c90:	18 16       	cp	r1, r24
     c92:	64 f4       	brge	.+24     	; 0xcac <main+0x216>
     c94:	88 ea       	ldi	r24, 0xA8	; 168
     c96:	95 e3       	ldi	r25, 0x35	; 53
     c98:	a1 e1       	ldi	r26, 0x11	; 17
     c9a:	b0 e4       	ldi	r27, 0x40	; 64
     c9c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     ca0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ca4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     ca8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cac:	f6 01       	movw	r30, r12
     cae:	60 89       	ldd	r22, Z+16	; 0x10
     cb0:	71 89       	ldd	r23, Z+17	; 0x11
								g_saturation_S = g_PacketBuffer.data.cur / 1000.;
     cb2:	82 89       	ldd	r24, Z+18	; 0x12
     cb4:	93 89       	ldd	r25, Z+19	; 0x13
     cb6:	28 d2       	rcall	.+1104   	; 0x1108 <__floatsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	4a e7       	ldi	r20, 0x7A	; 122
     cbe:	54 e4       	ldi	r21, 0x44	; 68
     cc0:	88 d1       	rcall	.+784    	; 0xfd2 <__divsf3>
     cc2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <g_saturation_S>
     cc6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <g_saturation_S+0x1>
     cca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_saturation_S+0x2>
     cce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_saturation_S+0x3>
     cd2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <g_saturation_S>
     cd6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <g_saturation_S+0x1>
								if(g_saturation_S < 0) g_saturation_S = -g_saturation_S;
     cda:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_saturation_S+0x2>
     cde:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_saturation_S+0x3>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	a9 01       	movw	r20, r18
     ce8:	70 d1       	rcall	.+736    	; 0xfca <__cmpsf2>
     cea:	88 23       	and	r24, r24
     cec:	8c f4       	brge	.+34     	; 0xd10 <main+0x27a>
     cee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_saturation_S>
     cf2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_saturation_S+0x1>
     cf6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_saturation_S+0x2>
     cfa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_saturation_S+0x3>
     cfe:	b0 58       	subi	r27, 0x80	; 128
     d00:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_saturation_S>
     d04:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <g_saturation_S+0x1>
     d08:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <g_saturation_S+0x2>
     d0c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <g_saturation_S+0x3>
     d10:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <g_saturation_S>
     d14:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <g_saturation_S+0x1>
								if(g_saturation_S >2.5) g_saturation_S = 2.5;
     d18:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_saturation_S+0x2>
     d1c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_saturation_S+0x3>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	9f d2       	rcall	.+1342   	; 0x1268 <__gesf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	64 f4       	brge	.+24     	; 0xd46 <main+0x2b0>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e2       	ldi	r26, 0x20	; 32
     d34:	b0 e4       	ldi	r27, 0x40	; 64
     d36:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_saturation_S>
     d3a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <g_saturation_S+0x1>
     d3e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <g_saturation_S+0x2>
     d42:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <g_saturation_S+0x3>
     d46:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <g_PacketMode>
     d4a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <checkSize>
     d4e:	b1 2c       	mov	r11, r1
							 break;
						 }
					 }
					 check = 0;
					 g_PacketMode = 0;
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <main+0x2da>
     d52:	f6 01       	movw	r30, r12
					 checkSize = 0;
     d54:	94 81       	ldd	r25, Z+4	; 0x04
     d56:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
								if(g_saturation_S < 0) g_saturation_S = -g_saturation_S;
								if(g_saturation_S >2.5) g_saturation_S = 2.5;
							 break;
						 }
					 }
					 check = 0;
     d5a:	98 17       	cp	r25, r24
					 g_PacketMode = 0;
					 checkSize = 0;
				 }
				 else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)){
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <main+0x2d0>
     d5e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <checkSize>
     d62:	85 31       	cpi	r24, 0x15	; 21
     d64:	28 f0       	brcs	.+10     	; 0xd70 <main+0x2da>
     d66:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <g_PacketMode>
     d6a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <checkSize>
     d6e:	b1 2c       	mov	r11, r1
					 check = 0;
					 g_PacketMode = 0;
     d70:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <g_BufReadCnt>
					 checkSize = 0;
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <g_BufReadCnt>

	unsigned char check = 0;
	
    while (1) {
		
		 for (;g_BufReadCnt !=g_BufWriteCnt;g_BufReadCnt++)
     d7a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <g_BufReadCnt>
     d7e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_BufWriteCnt>
     d82:	98 13       	cpse	r25, r24
     d84:	cd ce       	rjmp	.-614    	; 0xb20 <main+0x8a>
     d86:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     d8a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     d8e:	44 97       	sbiw	r24, 0x14	; 20
					 checkSize = 0;
				 }
			 }
		 }
		 
		 if (g_SendFlag > 19){//0번 timer OVERFLOW INTERRUP 20회 실행시(10ms) 현재 위치,각속도,전류 송신
     d90:	a4 f3       	brlt	.-24     	; 0xd7a <main+0x2e4>
     d92:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
     d96:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     d9a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_ID>
			 g_SendFlag = 0;
     d9e:	8e 83       	std	Y+6, r24	; 0x06
     da0:	9d 82       	std	Y+5, r9	; 0x05
			 
			 
			 packet.data.id = g_ID;
     da2:	af 82       	std	Y+7, r10	; 0x07
     da4:	18 86       	std	Y+8, r1	; 0x08
			 packet.data.size = sizeof(Packet_data_t);
     da6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_position_cur>
			 packet.data.mode = 3;
			 packet.data.check = 0;
     daa:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_position_cur+0x1>
			 
			 packet.data.pos = g_position_cur * 1000.;
     dae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_position_cur+0x2>
     db2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_position_cur+0x3>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a e7       	ldi	r20, 0x7A	; 122
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	58 d2       	rcall	.+1200   	; 0x1270 <__mulsf3>
     dc0:	70 d1       	rcall	.+736    	; 0x10a2 <__fixsfsi>
     dc2:	69 87       	std	Y+9, r22	; 0x09
     dc4:	7a 87       	std	Y+10, r23	; 0x0a
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
     dc8:	9c 87       	std	Y+12, r25	; 0x0c
     dca:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <g_velocity_cur>
     dce:	70 91 72 02 	lds	r23, 0x0272	; 0x800272 <g_velocity_cur+0x1>
			 packet.data.velo = g_velocity_cur * 1000.;
     dd2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <g_velocity_cur+0x2>
     dd6:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <g_velocity_cur+0x3>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a e7       	ldi	r20, 0x7A	; 122
     de0:	54 e4       	ldi	r21, 0x44	; 68
     de2:	46 d2       	rcall	.+1164   	; 0x1270 <__mulsf3>
     de4:	5e d1       	rcall	.+700    	; 0x10a2 <__fixsfsi>
     de6:	6d 87       	std	Y+13, r22	; 0x0d
     de8:	7e 87       	std	Y+14, r23	; 0x0e
     dea:	8f 87       	std	Y+15, r24	; 0x0f
     dec:	98 8b       	std	Y+16, r25	; 0x10
     dee:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <g_current_cur>
     df2:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <g_current_cur+0x1>
			 packet.data.cur = g_current_cur * 1000.;
     df6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <g_current_cur+0x2>
     dfa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <g_current_cur+0x3>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a e7       	ldi	r20, 0x7A	; 122
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	34 d2       	rcall	.+1128   	; 0x1270 <__mulsf3>
     e08:	4c d1       	rcall	.+664    	; 0x10a2 <__fixsfsi>
     e0a:	69 8b       	std	Y+17, r22	; 0x11
     e0c:	7a 8b       	std	Y+18, r23	; 0x12
     e0e:	8b 8b       	std	Y+19, r24	; 0x13
     e10:	9c 8b       	std	Y+20, r25	; 0x14
     e12:	fe 01       	movw	r30, r28
     e14:	39 96       	adiw	r30, 0x09	; 9
     e16:	81 91       	ld	r24, Z+
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	89 0f       	add	r24, r25
     e1c:	88 87       	std	Y+8, r24	; 0x08
			 
			 for(int i = 8;i<sizeof(Packet_t);i++)	packet.data.check +=packet.buffer[i];
     e1e:	ee 15       	cp	r30, r14
     e20:	ff 05       	cpc	r31, r15
     e22:	c9 f7       	brne	.-14     	; 0xe16 <main+0x380>
     e24:	8e 01       	movw	r16, r28
     e26:	0f 5f       	subi	r16, 0xFF	; 255
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	f8 01       	movw	r30, r16
     e2c:	81 91       	ld	r24, Z+
     e2e:	8f 01       	movw	r16, r30
     e30:	59 d0       	rcall	.+178    	; 0xee4 <TransUart0>
			 for(int i = 0;i<packet.data.size;i++)	TransUart0(packet.buffer[i]);
     e32:	0e 15       	cp	r16, r14
     e34:	1f 05       	cpc	r17, r15
     e36:	c9 f7       	brne	.-14     	; 0xe2a <main+0x394>
     e38:	a0 cf       	rjmp	.-192    	; 0xd7a <main+0x2e4>

00000e3a <InitIO>:
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	8a bb       	out	0x1a, r24	; 26
     e3e:	84 bb       	out	0x14, r24	; 20
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     e44:	87 e6       	ldi	r24, 0x67	; 103
     e46:	87 bb       	out	0x17, r24	; 23
     e48:	8a e1       	ldi	r24, 0x1A	; 26
     e4a:	82 b9       	out	0x02, r24	; 2
     e4c:	1b ba       	out	0x1b, r1	; 27
     e4e:	87 e0       	ldi	r24, 0x07	; 7
     e50:	88 bb       	out	0x18, r24	; 24
     e52:	08 95       	ret

00000e54 <InitTimer0>:
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	83 bf       	out	0x33, r24	; 51
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	87 bf       	out	0x37, r24	; 55
     e5c:	08 95       	ret

00000e5e <InitTimer1>:
     e5e:	82 ee       	ldi	r24, 0xE2	; 226
     e60:	8f bd       	out	0x2f, r24	; 47
     e62:	81 e1       	ldi	r24, 0x11	; 17
     e64:	8e bd       	out	0x2e, r24	; 46
     e66:	8f e8       	ldi	r24, 0x8F	; 143
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	97 bd       	out	0x27, r25	; 39
     e6c:	86 bd       	out	0x26, r24	; 38
     e6e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     e72:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e76:	1b bc       	out	0x2b, r1	; 43
     e78:	1a bc       	out	0x2a, r1	; 42
     e7a:	19 bc       	out	0x29, r1	; 41
     e7c:	18 bc       	out	0x28, r1	; 40
     e7e:	1d bc       	out	0x2d, r1	; 45
     e80:	1c bc       	out	0x2c, r1	; 44
     e82:	08 95       	ret

00000e84 <InitTimer3>:
     e84:	82 eb       	ldi	r24, 0xB2	; 178
     e86:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e8a:	81 e1       	ldi	r24, 0x11	; 17
     e8c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e90:	8f e8       	ldi	r24, 0x8F	; 143
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e9c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     ea0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     ea4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ea8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     eac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     eb0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     eb4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eb8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ebc:	08 95       	ret

00000ebe <InitADC>:
     ebe:	80 e4       	ldi	r24, 0x40	; 64
     ec0:	87 b9       	out	0x07, r24	; 7
     ec2:	86 e8       	ldi	r24, 0x86	; 134
     ec4:	86 b9       	out	0x06, r24	; 6
     ec6:	08 95       	ret

00000ec8 <InitUart0>:
     ec8:	1b b8       	out	0x0b, r1	; 11
     eca:	88 e9       	ldi	r24, 0x98	; 152
     ecc:	8a b9       	out	0x0a, r24	; 10
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ed4:	87 e6       	ldi	r24, 0x67	; 103
     ed6:	89 b9       	out	0x09, r24	; 9
     ed8:	08 95       	ret

00000eda <InitSPI>:
     eda:	80 e5       	ldi	r24, 0x50	; 80
     edc:	8d b9       	out	0x0d, r24	; 13
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	8e b9       	out	0x0e, r24	; 14
     ee2:	08 95       	ret

00000ee4 <TransUart0>:
     ee4:	5d 9b       	sbis	0x0b, 5	; 11
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <TransUart0>
     ee8:	8c b9       	out	0x0c, r24	; 12
     eea:	08 95       	ret

00000eec <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     eec:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     eee:	77 9b       	sbis	0x0e, 7	; 14
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <SPI_MasterSend+0x2>
	data = SPDR;
     ef2:	8f b1       	in	r24, 0x0f	; 15
     ef4:	08 95       	ret

00000ef6 <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     ef6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     ef8:	77 9b       	sbis	0x0e, 7	; 14
     efa:	fe cf       	rjmp	.-4      	; 0xef8 <SPI_MasterRecv+0x2>
	return SPDR;
     efc:	8f b1       	in	r24, 0x0f	; 15
     efe:	08 95       	ret

00000f00 <__subsf3>:
     f00:	50 58       	subi	r21, 0x80	; 128

00000f02 <__addsf3>:
     f02:	bb 27       	eor	r27, r27
     f04:	aa 27       	eor	r26, r26
     f06:	0e d0       	rcall	.+28     	; 0xf24 <__addsf3x>
     f08:	75 c1       	rjmp	.+746    	; 0x11f4 <__fp_round>
     f0a:	66 d1       	rcall	.+716    	; 0x11d8 <__fp_pscA>
     f0c:	30 f0       	brcs	.+12     	; 0xf1a <__addsf3+0x18>
     f0e:	6b d1       	rcall	.+726    	; 0x11e6 <__fp_pscB>
     f10:	20 f0       	brcs	.+8      	; 0xf1a <__addsf3+0x18>
     f12:	31 f4       	brne	.+12     	; 0xf20 <__addsf3+0x1e>
     f14:	9f 3f       	cpi	r25, 0xFF	; 255
     f16:	11 f4       	brne	.+4      	; 0xf1c <__addsf3+0x1a>
     f18:	1e f4       	brtc	.+6      	; 0xf20 <__addsf3+0x1e>
     f1a:	5b c1       	rjmp	.+694    	; 0x11d2 <__fp_nan>
     f1c:	0e f4       	brtc	.+2      	; 0xf20 <__addsf3+0x1e>
     f1e:	e0 95       	com	r30
     f20:	e7 fb       	bst	r30, 7
     f22:	51 c1       	rjmp	.+674    	; 0x11c6 <__fp_inf>

00000f24 <__addsf3x>:
     f24:	e9 2f       	mov	r30, r25
     f26:	77 d1       	rcall	.+750    	; 0x1216 <__fp_split3>
     f28:	80 f3       	brcs	.-32     	; 0xf0a <__addsf3+0x8>
     f2a:	ba 17       	cp	r27, r26
     f2c:	62 07       	cpc	r22, r18
     f2e:	73 07       	cpc	r23, r19
     f30:	84 07       	cpc	r24, r20
     f32:	95 07       	cpc	r25, r21
     f34:	18 f0       	brcs	.+6      	; 0xf3c <__addsf3x+0x18>
     f36:	71 f4       	brne	.+28     	; 0xf54 <__addsf3x+0x30>
     f38:	9e f5       	brtc	.+102    	; 0xfa0 <__addsf3x+0x7c>
     f3a:	8f c1       	rjmp	.+798    	; 0x125a <__fp_zero>
     f3c:	0e f4       	brtc	.+2      	; 0xf40 <__addsf3x+0x1c>
     f3e:	e0 95       	com	r30
     f40:	0b 2e       	mov	r0, r27
     f42:	ba 2f       	mov	r27, r26
     f44:	a0 2d       	mov	r26, r0
     f46:	0b 01       	movw	r0, r22
     f48:	b9 01       	movw	r22, r18
     f4a:	90 01       	movw	r18, r0
     f4c:	0c 01       	movw	r0, r24
     f4e:	ca 01       	movw	r24, r20
     f50:	a0 01       	movw	r20, r0
     f52:	11 24       	eor	r1, r1
     f54:	ff 27       	eor	r31, r31
     f56:	59 1b       	sub	r21, r25
     f58:	99 f0       	breq	.+38     	; 0xf80 <__addsf3x+0x5c>
     f5a:	59 3f       	cpi	r21, 0xF9	; 249
     f5c:	50 f4       	brcc	.+20     	; 0xf72 <__addsf3x+0x4e>
     f5e:	50 3e       	cpi	r21, 0xE0	; 224
     f60:	68 f1       	brcs	.+90     	; 0xfbc <__addsf3x+0x98>
     f62:	1a 16       	cp	r1, r26
     f64:	f0 40       	sbci	r31, 0x00	; 0
     f66:	a2 2f       	mov	r26, r18
     f68:	23 2f       	mov	r18, r19
     f6a:	34 2f       	mov	r19, r20
     f6c:	44 27       	eor	r20, r20
     f6e:	58 5f       	subi	r21, 0xF8	; 248
     f70:	f3 cf       	rjmp	.-26     	; 0xf58 <__addsf3x+0x34>
     f72:	46 95       	lsr	r20
     f74:	37 95       	ror	r19
     f76:	27 95       	ror	r18
     f78:	a7 95       	ror	r26
     f7a:	f0 40       	sbci	r31, 0x00	; 0
     f7c:	53 95       	inc	r21
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <__addsf3x+0x4e>
     f80:	7e f4       	brtc	.+30     	; 0xfa0 <__addsf3x+0x7c>
     f82:	1f 16       	cp	r1, r31
     f84:	ba 0b       	sbc	r27, r26
     f86:	62 0b       	sbc	r22, r18
     f88:	73 0b       	sbc	r23, r19
     f8a:	84 0b       	sbc	r24, r20
     f8c:	ba f0       	brmi	.+46     	; 0xfbc <__addsf3x+0x98>
     f8e:	91 50       	subi	r25, 0x01	; 1
     f90:	a1 f0       	breq	.+40     	; 0xfba <__addsf3x+0x96>
     f92:	ff 0f       	add	r31, r31
     f94:	bb 1f       	adc	r27, r27
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	c2 f7       	brpl	.-16     	; 0xf8e <__addsf3x+0x6a>
     f9e:	0e c0       	rjmp	.+28     	; 0xfbc <__addsf3x+0x98>
     fa0:	ba 0f       	add	r27, r26
     fa2:	62 1f       	adc	r22, r18
     fa4:	73 1f       	adc	r23, r19
     fa6:	84 1f       	adc	r24, r20
     fa8:	48 f4       	brcc	.+18     	; 0xfbc <__addsf3x+0x98>
     faa:	87 95       	ror	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	f7 95       	ror	r31
     fb4:	9e 3f       	cpi	r25, 0xFE	; 254
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__addsf3x+0x96>
     fb8:	b3 cf       	rjmp	.-154    	; 0xf20 <__addsf3+0x1e>
     fba:	93 95       	inc	r25
     fbc:	88 0f       	add	r24, r24
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <__addsf3x+0x9e>
     fc0:	99 27       	eor	r25, r25
     fc2:	ee 0f       	add	r30, r30
     fc4:	97 95       	ror	r25
     fc6:	87 95       	ror	r24
     fc8:	08 95       	ret

00000fca <__cmpsf2>:
     fca:	d9 d0       	rcall	.+434    	; 0x117e <__fp_cmp>
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <__cmpsf2+0x6>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	08 95       	ret

00000fd2 <__divsf3>:
     fd2:	0c d0       	rcall	.+24     	; 0xfec <__divsf3x>
     fd4:	0f c1       	rjmp	.+542    	; 0x11f4 <__fp_round>
     fd6:	07 d1       	rcall	.+526    	; 0x11e6 <__fp_pscB>
     fd8:	40 f0       	brcs	.+16     	; 0xfea <__divsf3+0x18>
     fda:	fe d0       	rcall	.+508    	; 0x11d8 <__fp_pscA>
     fdc:	30 f0       	brcs	.+12     	; 0xfea <__divsf3+0x18>
     fde:	21 f4       	brne	.+8      	; 0xfe8 <__divsf3+0x16>
     fe0:	5f 3f       	cpi	r21, 0xFF	; 255
     fe2:	19 f0       	breq	.+6      	; 0xfea <__divsf3+0x18>
     fe4:	f0 c0       	rjmp	.+480    	; 0x11c6 <__fp_inf>
     fe6:	51 11       	cpse	r21, r1
     fe8:	39 c1       	rjmp	.+626    	; 0x125c <__fp_szero>
     fea:	f3 c0       	rjmp	.+486    	; 0x11d2 <__fp_nan>

00000fec <__divsf3x>:
     fec:	14 d1       	rcall	.+552    	; 0x1216 <__fp_split3>
     fee:	98 f3       	brcs	.-26     	; 0xfd6 <__divsf3+0x4>

00000ff0 <__divsf3_pse>:
     ff0:	99 23       	and	r25, r25
     ff2:	c9 f3       	breq	.-14     	; 0xfe6 <__divsf3+0x14>
     ff4:	55 23       	and	r21, r21
     ff6:	b1 f3       	breq	.-20     	; 0xfe4 <__divsf3+0x12>
     ff8:	95 1b       	sub	r25, r21
     ffa:	55 0b       	sbc	r21, r21
     ffc:	bb 27       	eor	r27, r27
     ffe:	aa 27       	eor	r26, r26
    1000:	62 17       	cp	r22, r18
    1002:	73 07       	cpc	r23, r19
    1004:	84 07       	cpc	r24, r20
    1006:	38 f0       	brcs	.+14     	; 0x1016 <__divsf3_pse+0x26>
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	44 1f       	adc	r20, r20
    1012:	aa 1f       	adc	r26, r26
    1014:	a9 f3       	breq	.-22     	; 0x1000 <__divsf3_pse+0x10>
    1016:	33 d0       	rcall	.+102    	; 0x107e <__divsf3_pse+0x8e>
    1018:	0e 2e       	mov	r0, r30
    101a:	3a f0       	brmi	.+14     	; 0x102a <__divsf3_pse+0x3a>
    101c:	e0 e8       	ldi	r30, 0x80	; 128
    101e:	30 d0       	rcall	.+96     	; 0x1080 <__divsf3_pse+0x90>
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	50 40       	sbci	r21, 0x00	; 0
    1024:	e6 95       	lsr	r30
    1026:	00 1c       	adc	r0, r0
    1028:	ca f7       	brpl	.-14     	; 0x101c <__divsf3_pse+0x2c>
    102a:	29 d0       	rcall	.+82     	; 0x107e <__divsf3_pse+0x8e>
    102c:	fe 2f       	mov	r31, r30
    102e:	27 d0       	rcall	.+78     	; 0x107e <__divsf3_pse+0x8e>
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	bb 1f       	adc	r27, r27
    1038:	26 17       	cp	r18, r22
    103a:	37 07       	cpc	r19, r23
    103c:	48 07       	cpc	r20, r24
    103e:	ab 07       	cpc	r26, r27
    1040:	b0 e8       	ldi	r27, 0x80	; 128
    1042:	09 f0       	breq	.+2      	; 0x1046 <__divsf3_pse+0x56>
    1044:	bb 0b       	sbc	r27, r27
    1046:	80 2d       	mov	r24, r0
    1048:	bf 01       	movw	r22, r30
    104a:	ff 27       	eor	r31, r31
    104c:	93 58       	subi	r25, 0x83	; 131
    104e:	5f 4f       	sbci	r21, 0xFF	; 255
    1050:	2a f0       	brmi	.+10     	; 0x105c <__divsf3_pse+0x6c>
    1052:	9e 3f       	cpi	r25, 0xFE	; 254
    1054:	51 05       	cpc	r21, r1
    1056:	68 f0       	brcs	.+26     	; 0x1072 <__divsf3_pse+0x82>
    1058:	b6 c0       	rjmp	.+364    	; 0x11c6 <__fp_inf>
    105a:	00 c1       	rjmp	.+512    	; 0x125c <__fp_szero>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	ec f3       	brlt	.-6      	; 0x105a <__divsf3_pse+0x6a>
    1060:	98 3e       	cpi	r25, 0xE8	; 232
    1062:	dc f3       	brlt	.-10     	; 0x105a <__divsf3_pse+0x6a>
    1064:	86 95       	lsr	r24
    1066:	77 95       	ror	r23
    1068:	67 95       	ror	r22
    106a:	b7 95       	ror	r27
    106c:	f7 95       	ror	r31
    106e:	9f 5f       	subi	r25, 0xFF	; 255
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__divsf3_pse+0x74>
    1072:	88 0f       	add	r24, r24
    1074:	91 1d       	adc	r25, r1
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	97 f9       	bld	r25, 7
    107c:	08 95       	ret
    107e:	e1 e0       	ldi	r30, 0x01	; 1
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	bb 1f       	adc	r27, r27
    1088:	62 17       	cp	r22, r18
    108a:	73 07       	cpc	r23, r19
    108c:	84 07       	cpc	r24, r20
    108e:	ba 07       	cpc	r27, r26
    1090:	20 f0       	brcs	.+8      	; 0x109a <__divsf3_pse+0xaa>
    1092:	62 1b       	sub	r22, r18
    1094:	73 0b       	sbc	r23, r19
    1096:	84 0b       	sbc	r24, r20
    1098:	ba 0b       	sbc	r27, r26
    109a:	ee 1f       	adc	r30, r30
    109c:	88 f7       	brcc	.-30     	; 0x1080 <__divsf3_pse+0x90>
    109e:	e0 95       	com	r30
    10a0:	08 95       	ret

000010a2 <__fixsfsi>:
    10a2:	04 d0       	rcall	.+8      	; 0x10ac <__fixunssfsi>
    10a4:	68 94       	set
    10a6:	b1 11       	cpse	r27, r1
    10a8:	d9 c0       	rjmp	.+434    	; 0x125c <__fp_szero>
    10aa:	08 95       	ret

000010ac <__fixunssfsi>:
    10ac:	bc d0       	rcall	.+376    	; 0x1226 <__fp_splitA>
    10ae:	88 f0       	brcs	.+34     	; 0x10d2 <__fixunssfsi+0x26>
    10b0:	9f 57       	subi	r25, 0x7F	; 127
    10b2:	90 f0       	brcs	.+36     	; 0x10d8 <__fixunssfsi+0x2c>
    10b4:	b9 2f       	mov	r27, r25
    10b6:	99 27       	eor	r25, r25
    10b8:	b7 51       	subi	r27, 0x17	; 23
    10ba:	a0 f0       	brcs	.+40     	; 0x10e4 <__fixunssfsi+0x38>
    10bc:	d1 f0       	breq	.+52     	; 0x10f2 <__fixunssfsi+0x46>
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	88 1f       	adc	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	1a f0       	brmi	.+6      	; 0x10ce <__fixunssfsi+0x22>
    10c8:	ba 95       	dec	r27
    10ca:	c9 f7       	brne	.-14     	; 0x10be <__fixunssfsi+0x12>
    10cc:	12 c0       	rjmp	.+36     	; 0x10f2 <__fixunssfsi+0x46>
    10ce:	b1 30       	cpi	r27, 0x01	; 1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <__fixunssfsi+0x46>
    10d2:	c3 d0       	rcall	.+390    	; 0x125a <__fp_zero>
    10d4:	b1 e0       	ldi	r27, 0x01	; 1
    10d6:	08 95       	ret
    10d8:	c0 c0       	rjmp	.+384    	; 0x125a <__fp_zero>
    10da:	67 2f       	mov	r22, r23
    10dc:	78 2f       	mov	r23, r24
    10de:	88 27       	eor	r24, r24
    10e0:	b8 5f       	subi	r27, 0xF8	; 248
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <__fixunssfsi+0x46>
    10e4:	b9 3f       	cpi	r27, 0xF9	; 249
    10e6:	cc f3       	brlt	.-14     	; 0x10da <__fixunssfsi+0x2e>
    10e8:	86 95       	lsr	r24
    10ea:	77 95       	ror	r23
    10ec:	67 95       	ror	r22
    10ee:	b3 95       	inc	r27
    10f0:	d9 f7       	brne	.-10     	; 0x10e8 <__fixunssfsi+0x3c>
    10f2:	3e f4       	brtc	.+14     	; 0x1102 <__stack+0x3>
    10f4:	90 95       	com	r25
    10f6:	80 95       	com	r24
    10f8:	70 95       	com	r23
    10fa:	61 95       	neg	r22
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	08 95       	ret

00001104 <__floatunsisf>:
    1104:	e8 94       	clt
    1106:	09 c0       	rjmp	.+18     	; 0x111a <__floatsisf+0x12>

00001108 <__floatsisf>:
    1108:	97 fb       	bst	r25, 7
    110a:	3e f4       	brtc	.+14     	; 0x111a <__floatsisf+0x12>
    110c:	90 95       	com	r25
    110e:	80 95       	com	r24
    1110:	70 95       	com	r23
    1112:	61 95       	neg	r22
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	99 23       	and	r25, r25
    111c:	a9 f0       	breq	.+42     	; 0x1148 <__floatsisf+0x40>
    111e:	f9 2f       	mov	r31, r25
    1120:	96 e9       	ldi	r25, 0x96	; 150
    1122:	bb 27       	eor	r27, r27
    1124:	93 95       	inc	r25
    1126:	f6 95       	lsr	r31
    1128:	87 95       	ror	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f1 11       	cpse	r31, r1
    1132:	f8 cf       	rjmp	.-16     	; 0x1124 <__floatsisf+0x1c>
    1134:	fa f4       	brpl	.+62     	; 0x1174 <__floatsisf+0x6c>
    1136:	bb 0f       	add	r27, r27
    1138:	11 f4       	brne	.+4      	; 0x113e <__floatsisf+0x36>
    113a:	60 ff       	sbrs	r22, 0
    113c:	1b c0       	rjmp	.+54     	; 0x1174 <__floatsisf+0x6c>
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	8f 4f       	sbci	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	16 c0       	rjmp	.+44     	; 0x1174 <__floatsisf+0x6c>
    1148:	88 23       	and	r24, r24
    114a:	11 f0       	breq	.+4      	; 0x1150 <__floatsisf+0x48>
    114c:	96 e9       	ldi	r25, 0x96	; 150
    114e:	11 c0       	rjmp	.+34     	; 0x1172 <__floatsisf+0x6a>
    1150:	77 23       	and	r23, r23
    1152:	21 f0       	breq	.+8      	; 0x115c <__floatsisf+0x54>
    1154:	9e e8       	ldi	r25, 0x8E	; 142
    1156:	87 2f       	mov	r24, r23
    1158:	76 2f       	mov	r23, r22
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <__floatsisf+0x5e>
    115c:	66 23       	and	r22, r22
    115e:	71 f0       	breq	.+28     	; 0x117c <__floatsisf+0x74>
    1160:	96 e8       	ldi	r25, 0x86	; 134
    1162:	86 2f       	mov	r24, r22
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	2a f0       	brmi	.+10     	; 0x1174 <__floatsisf+0x6c>
    116a:	9a 95       	dec	r25
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	da f7       	brpl	.-10     	; 0x116a <__floatsisf+0x62>
    1174:	88 0f       	add	r24, r24
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__fp_cmp>:
    117e:	99 0f       	add	r25, r25
    1180:	00 08       	sbc	r0, r0
    1182:	55 0f       	add	r21, r21
    1184:	aa 0b       	sbc	r26, r26
    1186:	e0 e8       	ldi	r30, 0x80	; 128
    1188:	fe ef       	ldi	r31, 0xFE	; 254
    118a:	16 16       	cp	r1, r22
    118c:	17 06       	cpc	r1, r23
    118e:	e8 07       	cpc	r30, r24
    1190:	f9 07       	cpc	r31, r25
    1192:	c0 f0       	brcs	.+48     	; 0x11c4 <__fp_cmp+0x46>
    1194:	12 16       	cp	r1, r18
    1196:	13 06       	cpc	r1, r19
    1198:	e4 07       	cpc	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	98 f0       	brcs	.+38     	; 0x11c4 <__fp_cmp+0x46>
    119e:	62 1b       	sub	r22, r18
    11a0:	73 0b       	sbc	r23, r19
    11a2:	84 0b       	sbc	r24, r20
    11a4:	95 0b       	sbc	r25, r21
    11a6:	39 f4       	brne	.+14     	; 0x11b6 <__fp_cmp+0x38>
    11a8:	0a 26       	eor	r0, r26
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <__fp_cmp+0x46>
    11ac:	23 2b       	or	r18, r19
    11ae:	24 2b       	or	r18, r20
    11b0:	25 2b       	or	r18, r21
    11b2:	21 f4       	brne	.+8      	; 0x11bc <__fp_cmp+0x3e>
    11b4:	08 95       	ret
    11b6:	0a 26       	eor	r0, r26
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__fp_cmp+0x3e>
    11ba:	a1 40       	sbci	r26, 0x01	; 1
    11bc:	a6 95       	lsr	r26
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	81 1d       	adc	r24, r1
    11c2:	81 1d       	adc	r24, r1
    11c4:	08 95       	ret

000011c6 <__fp_inf>:
    11c6:	97 f9       	bld	r25, 7
    11c8:	9f 67       	ori	r25, 0x7F	; 127
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <__fp_nan>:
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	80 ec       	ldi	r24, 0xC0	; 192
    11d6:	08 95       	ret

000011d8 <__fp_pscA>:
    11d8:	00 24       	eor	r0, r0
    11da:	0a 94       	dec	r0
    11dc:	16 16       	cp	r1, r22
    11de:	17 06       	cpc	r1, r23
    11e0:	18 06       	cpc	r1, r24
    11e2:	09 06       	cpc	r0, r25
    11e4:	08 95       	ret

000011e6 <__fp_pscB>:
    11e6:	00 24       	eor	r0, r0
    11e8:	0a 94       	dec	r0
    11ea:	12 16       	cp	r1, r18
    11ec:	13 06       	cpc	r1, r19
    11ee:	14 06       	cpc	r1, r20
    11f0:	05 06       	cpc	r0, r21
    11f2:	08 95       	ret

000011f4 <__fp_round>:
    11f4:	09 2e       	mov	r0, r25
    11f6:	03 94       	inc	r0
    11f8:	00 0c       	add	r0, r0
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__fp_round+0xc>
    11fc:	88 23       	and	r24, r24
    11fe:	52 f0       	brmi	.+20     	; 0x1214 <__fp_round+0x20>
    1200:	bb 0f       	add	r27, r27
    1202:	40 f4       	brcc	.+16     	; 0x1214 <__fp_round+0x20>
    1204:	bf 2b       	or	r27, r31
    1206:	11 f4       	brne	.+4      	; 0x120c <__fp_round+0x18>
    1208:	60 ff       	sbrs	r22, 0
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <__fp_round+0x20>
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	08 95       	ret

00001216 <__fp_split3>:
    1216:	57 fd       	sbrc	r21, 7
    1218:	90 58       	subi	r25, 0x80	; 128
    121a:	44 0f       	add	r20, r20
    121c:	55 1f       	adc	r21, r21
    121e:	59 f0       	breq	.+22     	; 0x1236 <__fp_splitA+0x10>
    1220:	5f 3f       	cpi	r21, 0xFF	; 255
    1222:	71 f0       	breq	.+28     	; 0x1240 <__fp_splitA+0x1a>
    1224:	47 95       	ror	r20

00001226 <__fp_splitA>:
    1226:	88 0f       	add	r24, r24
    1228:	97 fb       	bst	r25, 7
    122a:	99 1f       	adc	r25, r25
    122c:	61 f0       	breq	.+24     	; 0x1246 <__fp_splitA+0x20>
    122e:	9f 3f       	cpi	r25, 0xFF	; 255
    1230:	79 f0       	breq	.+30     	; 0x1250 <__fp_splitA+0x2a>
    1232:	87 95       	ror	r24
    1234:	08 95       	ret
    1236:	12 16       	cp	r1, r18
    1238:	13 06       	cpc	r1, r19
    123a:	14 06       	cpc	r1, r20
    123c:	55 1f       	adc	r21, r21
    123e:	f2 cf       	rjmp	.-28     	; 0x1224 <__fp_split3+0xe>
    1240:	46 95       	lsr	r20
    1242:	f1 df       	rcall	.-30     	; 0x1226 <__fp_splitA>
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <__fp_splitA+0x30>
    1246:	16 16       	cp	r1, r22
    1248:	17 06       	cpc	r1, r23
    124a:	18 06       	cpc	r1, r24
    124c:	99 1f       	adc	r25, r25
    124e:	f1 cf       	rjmp	.-30     	; 0x1232 <__fp_splitA+0xc>
    1250:	86 95       	lsr	r24
    1252:	71 05       	cpc	r23, r1
    1254:	61 05       	cpc	r22, r1
    1256:	08 94       	sec
    1258:	08 95       	ret

0000125a <__fp_zero>:
    125a:	e8 94       	clt

0000125c <__fp_szero>:
    125c:	bb 27       	eor	r27, r27
    125e:	66 27       	eor	r22, r22
    1260:	77 27       	eor	r23, r23
    1262:	cb 01       	movw	r24, r22
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret

00001268 <__gesf2>:
    1268:	8a df       	rcall	.-236    	; 0x117e <__fp_cmp>
    126a:	08 f4       	brcc	.+2      	; 0x126e <__gesf2+0x6>
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__mulsf3>:
    1270:	0b d0       	rcall	.+22     	; 0x1288 <__mulsf3x>
    1272:	c0 cf       	rjmp	.-128    	; 0x11f4 <__fp_round>
    1274:	b1 df       	rcall	.-158    	; 0x11d8 <__fp_pscA>
    1276:	28 f0       	brcs	.+10     	; 0x1282 <__mulsf3+0x12>
    1278:	b6 df       	rcall	.-148    	; 0x11e6 <__fp_pscB>
    127a:	18 f0       	brcs	.+6      	; 0x1282 <__mulsf3+0x12>
    127c:	95 23       	and	r25, r21
    127e:	09 f0       	breq	.+2      	; 0x1282 <__mulsf3+0x12>
    1280:	a2 cf       	rjmp	.-188    	; 0x11c6 <__fp_inf>
    1282:	a7 cf       	rjmp	.-178    	; 0x11d2 <__fp_nan>
    1284:	11 24       	eor	r1, r1
    1286:	ea cf       	rjmp	.-44     	; 0x125c <__fp_szero>

00001288 <__mulsf3x>:
    1288:	c6 df       	rcall	.-116    	; 0x1216 <__fp_split3>
    128a:	a0 f3       	brcs	.-24     	; 0x1274 <__mulsf3+0x4>

0000128c <__mulsf3_pse>:
    128c:	95 9f       	mul	r25, r21
    128e:	d1 f3       	breq	.-12     	; 0x1284 <__mulsf3+0x14>
    1290:	95 0f       	add	r25, r21
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	55 1f       	adc	r21, r21
    1296:	62 9f       	mul	r22, r18
    1298:	f0 01       	movw	r30, r0
    129a:	72 9f       	mul	r23, r18
    129c:	bb 27       	eor	r27, r27
    129e:	f0 0d       	add	r31, r0
    12a0:	b1 1d       	adc	r27, r1
    12a2:	63 9f       	mul	r22, r19
    12a4:	aa 27       	eor	r26, r26
    12a6:	f0 0d       	add	r31, r0
    12a8:	b1 1d       	adc	r27, r1
    12aa:	aa 1f       	adc	r26, r26
    12ac:	64 9f       	mul	r22, r20
    12ae:	66 27       	eor	r22, r22
    12b0:	b0 0d       	add	r27, r0
    12b2:	a1 1d       	adc	r26, r1
    12b4:	66 1f       	adc	r22, r22
    12b6:	82 9f       	mul	r24, r18
    12b8:	22 27       	eor	r18, r18
    12ba:	b0 0d       	add	r27, r0
    12bc:	a1 1d       	adc	r26, r1
    12be:	62 1f       	adc	r22, r18
    12c0:	73 9f       	mul	r23, r19
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	62 1f       	adc	r22, r18
    12c8:	83 9f       	mul	r24, r19
    12ca:	a0 0d       	add	r26, r0
    12cc:	61 1d       	adc	r22, r1
    12ce:	22 1f       	adc	r18, r18
    12d0:	74 9f       	mul	r23, r20
    12d2:	33 27       	eor	r19, r19
    12d4:	a0 0d       	add	r26, r0
    12d6:	61 1d       	adc	r22, r1
    12d8:	23 1f       	adc	r18, r19
    12da:	84 9f       	mul	r24, r20
    12dc:	60 0d       	add	r22, r0
    12de:	21 1d       	adc	r18, r1
    12e0:	82 2f       	mov	r24, r18
    12e2:	76 2f       	mov	r23, r22
    12e4:	6a 2f       	mov	r22, r26
    12e6:	11 24       	eor	r1, r1
    12e8:	9f 57       	subi	r25, 0x7F	; 127
    12ea:	50 40       	sbci	r21, 0x00	; 0
    12ec:	8a f0       	brmi	.+34     	; 0x1310 <__mulsf3_pse+0x84>
    12ee:	e1 f0       	breq	.+56     	; 0x1328 <__mulsf3_pse+0x9c>
    12f0:	88 23       	and	r24, r24
    12f2:	4a f0       	brmi	.+18     	; 0x1306 <__mulsf3_pse+0x7a>
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	bb 1f       	adc	r27, r27
    12fa:	66 1f       	adc	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	91 50       	subi	r25, 0x01	; 1
    1302:	50 40       	sbci	r21, 0x00	; 0
    1304:	a9 f7       	brne	.-22     	; 0x12f0 <__mulsf3_pse+0x64>
    1306:	9e 3f       	cpi	r25, 0xFE	; 254
    1308:	51 05       	cpc	r21, r1
    130a:	70 f0       	brcs	.+28     	; 0x1328 <__mulsf3_pse+0x9c>
    130c:	5c cf       	rjmp	.-328    	; 0x11c6 <__fp_inf>
    130e:	a6 cf       	rjmp	.-180    	; 0x125c <__fp_szero>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	ec f3       	brlt	.-6      	; 0x130e <__mulsf3_pse+0x82>
    1314:	98 3e       	cpi	r25, 0xE8	; 232
    1316:	dc f3       	brlt	.-10     	; 0x130e <__mulsf3_pse+0x82>
    1318:	86 95       	lsr	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	b7 95       	ror	r27
    1320:	f7 95       	ror	r31
    1322:	e7 95       	ror	r30
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	c1 f7       	brne	.-16     	; 0x1318 <__mulsf3_pse+0x8c>
    1328:	fe 2b       	or	r31, r30
    132a:	88 0f       	add	r24, r24
    132c:	91 1d       	adc	r25, r1
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <_exit>:
    1336:	f8 94       	cli

00001338 <__stop_program>:
    1338:	ff cf       	rjmp	.-2      	; 0x1338 <__stop_program>
